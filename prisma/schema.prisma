generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EyesColor {
  BLUE
  GREEN
  BROWN
  BLACK
  GREY
}

enum HairColor {
  BLONDE
  BROWN
  BLACK
  RED
  GREY
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  email         String          @unique
  password      String
  firstName     String
  lastName      String
  model         Model?
  admin         Admin?
  Token         Token[]
  SubmitProfile SubmitProfile[]
}

model Admin {
  id          Int  @id @default(autoincrement())
  accessLevel Int
  user        User @relation(fields: [userId], references: [id])
  userId      Int  @unique
}

model Model {
  id               Int                @id @default(autoincrement())
  birthDate        DateTime           @db.Date
  description      String?
  eyescolor        EyesColor
  haircolor        HairColor
  gender           Gender
  height           Int
  weight           Int
  photo            Photo[]
  pastExperience   PastExperience[]
  user             User               @relation(fields: [userId], references: [id])
  userId           Int                @unique
  Address          Address[]
  SubmitToProfiles SubmitToProfiles[]
}

model Photo {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  model     Model    @relation(fields: [modelId], references: [id])
  modelId   Int
}

model PastExperience {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String
  model       Model    @relation(fields: [modelId], references: [id])
  modelId     Int
}

model SubmitProfile {
  id               Int                @id @default(autoincrement())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  phone            String
  birthDate        DateTime
  firstName        String
  lastName         String
  eyescolor        EyesColor
  haircolor        HairColor
  photo            String
  pastExperiences  String
  Address          Address[]
  SubmitToProfiles SubmitToProfiles[]
  user             User               @relation(fields: [userId], references: [id])
  userId           Int
}

model Address {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  number          String
  street          String
  city            String
  zip             String
  country         String
  model           Model?         @relation(fields: [modelId], references: [id])
  modelId         Int?
  submitProfile   SubmitProfile? @relation(fields: [submitProfileId], references: [id])
  submitProfileId Int?
}

model SubmitToProfiles {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  submitProfile   SubmitProfile @relation(fields: [submitProfileId], references: [id])
  submitProfileId Int
  model           Model         @relation(fields: [modelId], references: [id])
  modelId         Int
}

model Token {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token     String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}
